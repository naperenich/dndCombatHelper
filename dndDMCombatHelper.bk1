/*******************************
/DND Combat Simulator
/The purpose of this program is to help DMs manage combat more smoothly. It also
/will force the coder to understand how a class works
/Developed by Drew Perenich, dperenich@outlook.combat
/Other Needed files:
/*******************************/
using namespace std;//fuck using the whole std::cin crap. If you think thats at all necessary you are a peice of shit
#include<iostream>//for cout cin, etc
#include<iomanip>//for setw, 
#include<cstring>//why is this not standard
#include<random>//for dice rolling
#include<fstream>//for printing to files
#include<limits>//if needed
#include<vector>//to hold array of classes

class npc;//holds info about all group of npc (kobolds, acrolytes, guards, etc), such initiative bonus, max health, etc

//functions
void printWelcome();//print welcome characters
void lineOfAstrisks();//print line of astrisks
void basicInfo(char&);//gets basic info for battle, such as rolling for health
void initalizeEnemy(vector<npc>&, char);//initalizes enemy
//global constant

class npc{//main npc class
	public:
	string title;//name of npc, eg cultist 1
	int health;//amount of health
	int initB;//initiative modifier
	
		
};
int main(){
	char rollHealth;//weather or not to roll health
	bool done;//used for loop control
	char yn;//holds y or n that does not need to be stored
	vector<npc> npcs;//array of npcs
	//startup
	printWelcome();//print welcome menu
	basicInfo(rollHealth);//get basic information
	//initalize npcs, gonna start putting stuff in main since I don't want to mess with passing arrays by refrence/pointer/whatever bullshit
	initalizeEnemy(npcs, rollHealth);//initalize npcs
	return 0;
}



void printWelcome(){
	char dummy;//used for cin stop
	lineOfAstrisks();
	cout << "This program is meant to help DMs run Combat Easier" << endl;
	cout << "It is reccomended you go through a test combat before using in a session," << endl;
	cout << "To see what the Program will and won't do." << endl;
	cout << "You will still need to roll dice for combat, and have stat blocks open, as this will not make turns for the NPCs" << endl;
	cout << "This is all text based, should make your life easier" << endl;
	cout << "As of right now, there is no way to change information once put in, so it is reccomended you double check" << endl;
	cout << "All info before continuing forward" << endl;
	cout << "Press enter to continue" << endl;
	cin.get(dummy);//stop until entered
	cout << endl;
	lineOfAstrisks();
	return;
}
void lineOfAstrisks(){

	cout << string(75, '*') << endl;//prints line of astrisks
	return;
}
void basicInfo(char& rHealth){
	//get basic information
	bool done = false;
	cout << "Lets get the basics" << endl;
	cout << "Do you want to roll enemy Health? y for yes, n for no" << endl;
	cin.get(rHealth);//get answer to rolling enemy health
	done = false;
	while(!done){
		if(rHealth == 'y'){
			cout << "You have chosen to roll health. That is something that this program can speed up!" << endl;
			done = true;
		}else if(rHealth == 'n'){
			cout << "You have chosen to roll health. Boooooo!!!" << endl;
			done = true;
		}else{
			cin.ignore(INT_MAX, '\n');//flush file stream buffer
			cout << "Huh? You didnt answer y or n? Try again!!!" << endl;
			
			cin.get(rHealth);//retry
			}
	}
	return;
}	

void initalizeEnemy(vector<npc>& npcs, char rH){//initalizes enemy
	bool done;
	char yn;
	string groupName;//current group name of enemies
	string groupNames[] = {};//stores all group names seperate of class
	int groupNumber;//number of enemies in group
	int groupHealth, groupInitB;//health in of group members, initative of group members
	string npcName;//name of current NPC
	npc n;//current npc
	done = false;
	while(!done){
		cout << "Do you have anymore npc types? (eg kobolds, acrolytes, things with the same basic statblock)" << endl;
		cout << "y for yes, n for no" << endl;
		cin.ignore(INT_MAX, '\n');//flush cin
		cin.get(yn);//get response
		while(yn != 'y' && yn != 'n'){
				cout << "wrong answer!!! y or n!" << endl;
				cin.ignore(INT_MAX, '\n');//flush cin
				cin.get(yn);//get response
		}
		switch(yn){//check and see if anymore to add
			case 'n'://none to add
				cout << "Okay, out of enemies" << endl;
				done = true;
				break;
			case 'y':
				//prompt for name, number, etc
				cout << "What is the name of this group of enemies?" << endl;
				cin >> groupName;
				cout << "How many enemies are there" << endl;
				cin >> groupNumber;
				cout << "How much Health do they have (I will add ability to roll very soon)" << endl;
				cin >> groupHealth;
				cout << "Initaitive bonus?" << endl;
				cin >> groupInitB;
				for(int idx = 1; idx <= groupNumber; idx++){
					npcName = groupName + " " + to_string(idx);//make npc name unique eg kobold 1, kobold 2, etc
					//assign attributes to dummy object
					n.title = npcName;
					n.health = groupHealth;
					n.initB = groupInitB;
					//add to vector
					npcs.push_back(n);
				}
				for (int idx = 0; idx < npcs.size(); idx++){
					cout << npcs[idx].title << " " << npcs[idx].health << " "<< npcs[idx].initB << endl;
				}
		}
	}
}
